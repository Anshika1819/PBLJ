import java.util.*;
import java.util.stream.*;
import java.util.Comparator;

class Employee {
    String name;
    int age;
    double salary;

    Employee(String name, int age, double salary) {
        this.name = name;
        this.age = age;
        this.salary = salary;
    }

    public String toString() {
        return "Employee{name='" + name + "', age=" + age + ", salary=" + salary + "}";
    }
}

class Student {
    String name;
    double marks;

    Student(String name, double marks) {
        this.name = name;
        this.marks = marks;
    }

    public String toString() {
        return name + " (" + marks + ")";
    }
}

class Product {
    String name;
    double price;
    String category;

    Product(String name, double price, String category) {
        this.name = name;
        this.price = price;
        this.category = category;
    }

    public String toString() {
        return name + " - " + category + " - " + price;
    }
}

public class LambdaStreamDemo {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int choice;

        while (true) {
            System.out.println("\n--- Lambda & Stream Operations Menu ---");
            System.out.println("1. Sort Employees (Lambda)");
            System.out.println("2. Filter & Sort Students (Streams)");
            System.out.println("3. Product Dataset Operations (Streams)");
            System.out.println("4. Exit");
            System.out.print("Enter choice: ");
            choice = sc.nextInt();

            switch (choice) {
                case 1:
                    sortEmployees();
                    break;
                case 2:
                    filterStudents();
                    break;
                case 3:
                    productOperations();
                    break;
                case 4:
                    System.out.println("Exiting program...");
                    sc.close();
                    return;
                default:
                    System.out.println("Invalid choice. Try again.");
            }
        }
    }

    private static void sortEmployees() {
        List<Employee> employees = new ArrayList<>();
        employees.add(new Employee("Ishita", 25, 50000));
        employees.add(new Employee("Rohan", 30, 60000));
        employees.add(new Employee("Amit", 22, 45000));
        employees.add(new Employee("Neha", 28, 70000));

        System.out.println("\n--- Sort by Name ---");
        employees.stream().sorted((e1, e2) -> e1.name.compareTo(e2.name))
                .forEach(System.out::println);

        System.out.println("\n--- Sort by Age ---");
        employees.stream().sorted((e1, e2) -> Integer.compare(e1.age, e2.age))
                .forEach(System.out::println);

        System.out.println("\n--- Sort by Salary (Descending) ---");
        employees.stream().sorted((e1, e2) -> Double.compare(e2.salary, e1.salary))
                .forEach(System.out::println);
    }

    private static void filterStudents() {
        List<Student> students = new ArrayList<>();
        students.add(new Student("Aarav", 82));
        students.add(new Student("Ishita", 90));
        students.add(new Student("Rohan", 65));
        students.add(new Student("Meera", 78));
        students.add(new Student("Amit", 55));

        System.out.println("\n--- Students with Marks > 75 ---");
        students.stream()
                .filter(s -> s.marks > 75)
                .sorted(Comparator.comparingDouble(s -> s.marks))
                .map(s -> s.name)
                .forEach(System.out::println);
    }

    private static void productOperations() {
        List<Product> products = new ArrayList<>();
        products.add(new Product("Laptop", 55000, "Electronics"));
        products.add(new Product("Phone", 25000, "Electronics"));
        products.add(new Product("Shirt", 1500, "Clothing"));
        products.add(new Product("Jeans", 2000, "Clothing"));
        products.add(new Product("Mixer", 4000, "Home"));
        products.add(new Product("Sofa", 30000, "Home"));

        System.out.println("\n--- Group by Category ---");
        Map<String, List<Product>> grouped = products.stream()
                .collect(Collectors.groupingBy(p -> p.category));
        grouped.forEach((cat, list) -> {
            System.out.println(cat + " -> " + list);
        });

        System.out.println("\n--- Most Expensive Product in Each Category ---");
        Map<String, Optional<Product>> maxByCategory = products.stream()
                .collect(Collectors.groupingBy(
                        p -> p.category,
                        Collectors.maxBy(Comparator.comparingDouble(p -> p.price))
                ));
        maxByCategory.forEach((cat, prod) -> {
            System.out.println(cat + " -> " + prod.get());
        });

        System.out.println("\n--- Average Price of All Products ---");
        double avgPrice = products.stream()
                .collect(Collectors.averagingDouble(p -> p.price));
        System.out.println("Average Price = " + avgPrice);
    }
}
